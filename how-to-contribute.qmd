---
title: How to Contribute?
author: "ML+X community"
order: 1
tbl-colwidths: [5,30]
date-modified: "last-modified"
date-format: long
image: "/images/DALL¬∑E_knowledge-sharing-AI.png"

categories:
  - Contribute
---

We want Nexus to serve also as a place where members of the community can share their knowledge. This guide answers the question, how to contribute to the ML+X-Nexus?

## What kinds of resources or are hosted on Nexus?
Any original or external content that can help make the practice of ML more accessible, efficient, and reproducible is welcome on the Nexus platform! This includes, but is not limited to:

* üìú [**Educational Materials (Workshops, Demos, Books, etc.)**](https://uw-madison-datascience.github.io/ML-X-Nexus/Resources/): Explore a library of educational materials covering a wide range of ML-related topics, from foundational concepts to advanced techniques. Written by community members or sourced from external websites (e.g., Kaggle, YouTube), these guides offer clear explanations, practical examples, and actionable insights to help you navigate the complexities of ML with confidence.

* üèÜ [**ML Stories**](https://uw-madison-datascience.github.io/ML-X-Nexus/ML-stories/): Discover a curated collection of blogs which dive into real-world experiences and lessons learned by ML practitioners.

* üöÄ [**Exploratory Data Analysis (EDA) Case Studies**](https://uw-madison-datascience.github.io/ML-X-Nexus/ML-stories/): As the adage goes, "garbage in, garbage out," emphasizing the critical role of EDA in ensuring the quality and integrity of any ML pipeline. These case studies offer firsthand experiences in navigating real-world datasets, demonstrating the technical steps and domain knowledge needed to explore different data types (time-series, tabular, images, etc.) from various fields.

## Need inspiration for a good topic to post about?
An ever-expanding list of requested resources can be found on the [Issues page (on GitHub)](https://github.com/UW-Madison-DataScience/ML-X-Nexus/labels/resource). Search for open issues that have the "Resource" label to check out some of our top priorities. If you'd like to tackle a given issue, please comment on the issue to let others know. 

## What makes a good post?
Creating a useful and engaging post for the ML+X Nexus involves a few key elements to ensure it is beneficial for the community. Here are some guidelines to follow:

### Clear and concise title
The title should accurately reflect the content and main focus of the post. It should be engaging and specific, allowing readers to quickly understand what they can expect.

### Detailed description
Provide a comprehensive overview of the resource or topic. This should include:

- **Purpose and scope**: Clearly state what the resource covers and its main objectives. Explain why the content is valuable and how it can help practitioners.

- **Key features**: Highlight the unique aspects or strengths of the resource. This could include practical examples, interactive elements, or real-world applications.

- **Strengths and weaknesses**: Provide a balanced view by discussing both the strengths and any potential limitations of the resource. This helps users make informed decisions about whether the resource is right for them.

### Prerequisites
List any necessary background knowledge or skills required to fully benefit from the resource. This helps set expectations and ensures that users are adequately prepared. Include links to additional resources or tutorials that can help users gain the required knowledge.

### Estimated time to complete
Offer an estimate of the time commitment needed to complete the resource. This helps users plan their learning activities and manage their time effectively.

### Accessibility and usability
Ensure the resource is easy to access and use. Provide clear instructions on how to navigate and utilize the content. If the resource is hosted externally, include a direct link and any necessary login or access information.

### Engagement and interaction
Encourage community engagement by inviting feedback, discussions, and contributions. Provide clear instructions on how users can share their thoughts, ask questions, or contribute additional resources.

### Additional related resources
Include links to related materials or further readings that can enhance the user‚Äôs understanding and provide more in-depth knowledge on the topic. This can include books, articles, other workshops, or case studies. When possible, link to any relevant materials which are already hosted on the Nexus platform.

### Example of a good posts
* [External](https://uw-madison-datascience.github.io/ML-X-Nexus/Resources/Deep-learning_Keras/)
* Original (gold standard pending)

## How to improve an existing post?
Anyone is welcome and encouraged to suggest improvements to existing materials hosted on Nexus! The most straightforward way to do this is to click "Improve this page" from the post's webpage on Nexus. This button can be found near the top of each post webpage on the right side.

## How to make a new post with GitHub?

We follow GitHub's collaboration model, so the general idea to make a post or edit a document is the same:

1. [Fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo) the [ML+X-Nexus repository](https://github.com/UW-Madison-DataScience/ML-X-Nexus) repository.

2. [Clone](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository) that repository into your system of preference

3. [Create a new branch](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-and-deleting-branches-within-your-repository)

4. Write the post (see below for more), commit the changes, and [make a pull request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request)

These are many links and if you don't know how to use Git / GitHub, is could be a bit startling. A friendlier alternative could be to [download GitHub desktop](https://desktop.github.com/) and setup the repository by following the [Intro to GitHub Desktop guide](https://uw-madison-datascience.github.io/ML-X-Nexus/Guides/github-desktop/). If you need additional help (and work in a research lab at UW-Madison), you may also seek help at the Data Science Hub's [office hours ("Coding Meetup")](https://datascience.wisc.edu/hub/#dropin).


### How to write the post?

#### External resources
If you are adding an external resource, please start with the [template index.qmd file](https://github.com/UW-Madison-DataScience/ML-X-Nexus/blob/main/Contributor-templates/index.qmd). There are comments in the template which will help you make the appropriate edits for your resource. You can also check out how other posts have been formatted by clicking "Improve this page" from a given post's webpage. This will bring you directly to the qmd file for that post.

#### Orginal content
To write a post, there are many options: Write it using [quarto](www.quarto.org), [rmarkdown](https://rmarkdown.rstudio.com/), or [jupyter](https://jupyter.org/). The post could be a new file in the appropriate folder (Resources, ML-stories, or EDA), or a named folder with an `index.[ipynb|qmd|rmd|md]` extension. In any case, the header of the post needs to be a `yaml` section with the fields: 



```yaml
---
title: An Example
description: |
  An exploratory data analysis example
author: ML+X
date-modified: "last-modified"
date-format: long
categories:
  - EDA
  - PCA
---
```

The only fields that need to be changed are `title`, `description`, `author` and the `categories`. Ideally the categories should match the tags that are already in use in the site, e.g. if tag that we are using for support vector machines is `SVM` then use that one instead of writing another one like `support-vector-machines`.

### Where to locate your post?

We want the site to be constantly evolving with the community, and our intention is to keep the contributions to the site as free as possible. However, we added some sections to structure the site a little bit:

```txt
.
‚îú‚îÄ‚îÄ Resources
‚îú‚îÄ‚îÄ EDA-examples
‚îú‚îÄ‚îÄ ML-stories
```

## Extra: Essential Git Terminology: {#sec-terminology}

This section was copied from [Chris's guide on How to use Git/Github Demo](https://uw-madison-datascience.github.io/ML-X-Nexus/Guides/github-desktop/)

- **Repository == repo**: A project that is tracked via git/GitHub
  
    - **Remote repo**: A git project that is stored on GitHub
    - **Local repo**: A git project that has been downloaded to your local machine
    
- **Clone**: Cloning is the process of making a copy of a remote repo on your local machine. This allows you to work on the project locally and perform tasks like commits, branches, and pulls.
- **Commit**: A git command that marks the completion of new work to a repo (e.g., add a new script, add a feature, fill out README). You can always recover previous versions of your work by loading up a previous commit.
- **Push**: A git command that sends local changes (commits) stored in your local repo to the remote repo.
- **Pull**: A git command that allows you to update your local repo based on changes made to the remote repo (e.g., if your colleague pushes to the remote repo)
- **Branch**: A branch in Git is a parallel line of development that allows you to work on features, bug fixes, or experiments without affecting the main codebase. You can create and switch between branches to isolate your work.
- **Merge**: Merging is the process of integrating changes from one branch into another. This is typically done to combine the changes made in a feature branch with the main branch (e.g., main or master).
- **Pull Request (PR)**: A pull request is a feature provided by platforms like GitHub, GitLab, and Bitbucket. It's a way to propose changes (commits) to a project. Others can review the changes, and once approved, they can be merged into the main branch.
- **Fork**: Forking a repository means creating a copy of someone else's project in your GitHub account. This allows you to make changes independently and propose those changes back to the original project via pull requests. If everyone on your team has write-access to the repo, it‚Äôs best to use new branches instead of forks for pull requests. 
- **Gitignore**: A .gitignore file is used to specify which files and directories should be excluded from version control. It's essential for preventing unnecessary or sensitive files from being included in the repository.
